import warnings
warnings.filterwarnings("ignore")

import numpy as np 
import pandas as pd
import matplotlib.pyplot as plt
dataset = pd.read_csv("./boston.csv") 
dataset


dataset.shape

dataset.head()

dataset.tail()

dataset.info()

dataset.describe()

dataset.isnull().sum()

type(dataset)

data = pd.DataFrame()

data.isnull().sum()

import seaborn as sns 
sns.distplot(dataset.Price)

sns.boxplot(dataset.Price)

correlation = dataset.corr() 
correlation.loc['Price']

ig,axes = plt.subplots(figsize=(15,12)) 
sns.heatmap(correlation,square = True, annot=True)

plt.figure(figsize=(20,5))
features = ['LSTAT','RM','PTRATIO']
for i,col in enumerate(features):
    plt.subplot(1,len(features),i+1)
    x=dataset[col]
    y=dataset.Price
    plt.scatter(x,y,marker='o')
    plt.title("Variation in House Prices")
    plt.xlabel(col)
    plt.ylabel("House Prices in $1000")

X = dataset.iloc[:,:-1] 
y= dataset.Price

dataset.columns

dataset.dtypes

dataset.isnull().sum()

dataset.keys()






from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error,r2_score

X = dataset.iloc[:,:-1] 
y= dataset.Price


from sklearn.model_selection import train_test_split 
x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0) 

mean = x_train.mean(axis=0) 
std = x_train.std(axis=0)
x_train = (x_train - mean) / std 
x_test = (x_test - mean) / std

print(x_train.shape)
print(x_test.shape) 
print(y_train.shape) 
print(y_test.shape)




from sklearn.linear_model import LinearRegression 
regressor = LinearRegression()


sns.set(rc={'figure.figsize':(11.7,8.27)}) 
sns.distplot(dataset['Price'], bins=30) 
plt.show()



x = pd.DataFrame(np.c_[dataset['LSTAT'], dataset['RM']], columns=['LSTAT', 'RM'])
y = dataset['Price']

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0)

print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)




plt.figure(figsize=(20,5)) 
features=['LSTAT','RM'] 
target=dataset['Price']
for i,col in enumerate(features): 
    plt.subplot(1,len(features),i+1) 
    x=dataset[col]
    y=target 
    plt.scatter(x,y,marker='o') 
    plt.title(col) 
    plt.xlabel(col) 
    plt.ylabel('Price')



